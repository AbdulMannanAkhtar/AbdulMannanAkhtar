// #Employee management system
// data structures


     //************************************************************
    //  LinearNode.java      
    // 
    //  Represents a node in a linked list.
    //************************************************************
    
    package dataStructures;   


    public class LinearNode<T>
    {
       private LinearNode<T> next;
       private T element;
    
       //---------------------------------------------------------
       //  Creates an empty node.
       //---------------------------------------------------------
       public LinearNode()
       {
          this.next = null;
          this.element = null;
       }
    
       //---------------------------------------------------------
       //  Creates a node storing the specified element.
       //---------------------------------------------------------
       public LinearNode (T elem)
       {
          this.next = null;
          this.element = elem;
       }
    
       //---------------------------------------------------------
       //  Returns the node that follows this one.
       //---------------------------------------------------------
       public LinearNode<T> getNext()
       {
          return this.next;
       }
    
       //---------------------------------------------------------
       //  Sets the node that follows this one.
       //---------------------------------------------------------
       public void setNext (LinearNode<T> node)
       {
          this.next = node;
       }
    
       //---------------------------------------------------------
       //  Returns the element stored in this node.
       //---------------------------------------------------------
       public T getElement()
       {
          return this.element;
       }
    
       //---------------------------------------------------------
       //  Sets the element stored in this node.
       //---------------------------------------------------------
       public void setElement (T elem)
       {
          this.element = elem;
       }
    }

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

package dataStructures;

import dataStructures.LinearNode;

//This class implements the ADT definition of a linked list using the same signatures. Note that we can add extra methods
//here once all of the methods listed in the ADT interface are included.

public class LinkedList<T> implements LinkedListADT<T> {
	
	 private int count;  // the current number of elements in the list
	 private LinearNode<T> list; //pointer to the first element 
	 private LinearNode<T> last; //pointer to the last element 
	 
	 //-----------------------------------------------------------------
	 //  Creates an empty list.
	 //-----------------------------------------------------------------
	    public LinkedList()
	    {
	       this.count = 0;
	       this.last = null;
	       this.list = null;
	    }

	    
	 //  Adds one element to the end of this list
	    public void add (T element)
		   {      
			   LinearNode<T> node = new LinearNode<T> (element); 
			   LinearNode<T> current = this.list;
	       
			   if (size() == 0) {  
				   	this.last = node; // This is the last and the 
				 	this.list = node; // first node
				 	this.count++;
			   }//end if
			   else if(!current.getElement().equals(element))
			     {  
					last.setNext(node); // add node to the end of the list
					last = node; // now make this the new last node.
					this.count++; 
			      } //end else
		   }
	    
	   public T add1(T element)
	   {
		   LinearNode<T> current = this.list;
		   T result = null;
		   String List = "";
		   LinearNode<T> node = new LinearNode<T>(element);
		   
		   for(node = this.list; node != null ; node = current.getNext())
		   {
			   
			   if(size() == 0)
			   {
				   this.list = node;
				   this.last = node;
				   this.count++;
			   }
			   else if(!current.getElement().equals(element))
			   {
				   do
				   {
					   //result = this.last.getElement();
					   last.setNext(node);
					   last = node;
					   this.count++;
					   result = this.last.getElement();
				   }while(!current.getElement().equals(element));
				   
			   }
			
		}
		return result;
		   }				
		   
		  

	   //  Removes and returns the first element from this list
	
	public T remove()
	   {
		   LinearNode<T> temp = null;
		   T result = null;
			if (isEmpty()) {
				System.out.println("There are no nodes in the list");
			}//end if
			else {
				
				result = this.list.getElement();
				temp = list;
				this.list = this.list.getNext();
				temp.setNext(null); //dereference the original first element
				count--;
			}//end else
			return result;

	   }
	public T removeV2(T element)
	{
		LinearNode<T> current = this.list;
		LinearNode<T> previous = this.list;
		T result = null;
		
		for(current = this.list; current != null && !current.getElement().equals(element); current = current.getNext())
		{
			previous = current;
		}
		
				if (isEmpty()) {
					System.out.println("There are no nodes in the list");
				}//end if
				else if(current == list)
				{
					
					result = this.list.getElement();
					current = list;
					this.list = this.list.getNext();
					current.setNext(null); //dereference the original first element
					count--;
				}//end else
				else if(current == last)
				{
					result = current.getElement();
					//current = last;
					current.setNext(previous);
					previous = last;
					previous.setNext(null);
					//previous = last;
					count --;
					
				}
				else
				{
					previous.setNext(current.getNext());
					current.setNext(null);
					count --;
				}
			
		return result;
		}

	  
	   
	   //  Returns true if this list contains no elements
	   public boolean isEmpty()
	   {
		   if (this.list == null)
			   return true;
		   else
			   return false;
	   }


	   //  Returns the number of elements in this list
	   public int size()
	   {
		   return this.count;
	   }

	   //  Returns a string representation of this list
	  


	public String toString()
	   {
		   LinearNode<T> current = null;
		   String fullList = "";
		   
		   for (current = this.list; current != null; current = current.getNext())
		   {
			   fullList = fullList + "\n" + current.getElement().toString();
		   }//end for
		   
		   return fullList + "\n";
	   }
	
	public T get(int i)
	{
		LinearNode<T> current = this.list;
		
		for(int count = 1; count < 1; count ++ )
		{
			current = current.getNext();
		}
		
		return current.getElement();
		
		
	}
	
	public boolean contains(T element)
	{
		LinearNode<T> current = this.list;
		boolean a = false;
		
		for(current = this.list; current != null; current = current.getNext())
		{
			if(element.equals(current.getElement()))
			{
				a = true;
			}
			else
			{
				a = false;
			}
		}
		return a;
	}
	
	public LinearNode<T> insert(T element)
	{
		LinearNode<T> current = this.list;
		
		for(current = this.list; current != null && !current.getElement().equals(element); current = current.getNext())
		{
			current = current.getNext();
			
		}
		return current;
	
	}
	
	
	public LinearNode<T> firstLinearNode()
	{
		//LinearNode<T> current = list;
		
		return this.list;
		
	}
	
	public LinearNode<T> lastLinearNode()
	{
		return this.last;
	}
	
	public T firstElement()
	{
		LinearNode<T> current = this.list;
		
		return this.list.getElement();
	}
	
	public T lastElement()
	{
		LinearNode<T> current = this.last;
		
		return this.last.getElement();
	}


}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//Abstract Data Type definition for a custom Linked List

package dataStructures;

public interface LinkedListADT <T>
	{
	   //  Adds one element to the start or end of this list
	   public void add (T element);

	   //  Removes and returns the first element from this list
	   public T remove();
  
	   //  Returns true if this list contains no elements
	   public boolean isEmpty();

	   //  Returns the number of elements in this list
	   public int size();

	   //  Returns a string representation of this list
	   public String toString();
	   
	   // Adds an element only if the element doesnt exit in the list already
	   public T add1(T element); 
	   
	   // removes an element anywhere in the list after it is passed in as a parameter
	   public T removeV2(T element);
	   
	   // gets an element
	   public T get(int i);

	   public boolean contains(T element);
	   
	   public LinearNode<T> insert(T element);
	   
	   public LinearNode<T> firstLinearNode();
	   
	   public LinearNode<T> lastLinearNode();
	   
	   public T firstElement();
	   
	   public T lastElement();
	

}
