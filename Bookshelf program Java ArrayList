// ADT
package generics;

public interface ArrayListADT<T> {
	
	//pure module which adds an element to the ArrayList
	public void add (T element);
	
	//function to remove the last element in the ArrayList and return its memory address
	public T remove();
	
	//boolean function to indicate if the ArrayList is empty or not
	 public boolean isEmpty();

	 //return the number of elements in the ArrayList
	 public int size();
	 
	 //toString to create a "sentence" containing the contents of all objects in the ArrayList
	 public String toString();
	 
	 // function to get and return the position of an object in a index.
	 public T get(int index);

}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ArrayList
package generics;

public class ArrayList<T>
{
   private final int DEFAULT_CAPACITY = 100;
   private int open;  // indicates the next open slot
   private int count; //number of items inserted into the array so far
   private T[] array; 
   private int capacity; //maximum number of slots in the array

   //-----------------------------------------------------------------
   //  Creates an empty ArrayList using the default capacity.
   //-----------------------------------------------------------------
   public ArrayList()
   {
      open = 0;
      count = 0;
      array = (T[])(new Object[DEFAULT_CAPACITY]);
      for (int i=0; i<DEFAULT_CAPACITY; i++)
    	  array[i] = null;
      this.capacity = DEFAULT_CAPACITY;
   }

   //-----------------------------------------------------------------
   //  Creates an empty ArrayList using the specified capacity.
   //-----------------------------------------------------------------
   public ArrayList(int initialCapacity)
   {
      this.open = 0;
      this.count = 0;
      array = (T[])(new Object[initialCapacity]);
      for (int i=0; i<initialCapacity; i++)
    	  array[i] = null;
      this.capacity = initialCapacity;
   }

   //-----------------------------------------------------------------
   //  Adds the specified element to the next available slot in the array
   //-----------------------------------------------------------------
   public void add (T element)
   {
       if (size() == array.length )
		  expandCapacity();
         array[open] = element;
         this.open++;
         this.count++;
   }
   
  //-----------------------------------------------------------------
   //  Second version of add - adds the specified element to index position index
   //-----------------------------------------------------------------
   public void add (T element, int index)
   {
	    //if (size() == this.capacity)
		  //expandCapacity();

	   if (index > array.length)
		 System.out.println("Sorry this slot doesn't exist");
	   else
		   if (array[index] == null)
	           {
		       array[index] = element;
		       this.count++;
               }
	   else
		   System.out.println("Sorry this slot is taken.");
   }

   //-----------------------------------------------------------------
   //  Removes the last element added to the array. 
   //-----------------------------------------------------------------
   public T remove()
   {
      if (isEmpty())
        System.out.println("The list is empty");

      open--;
      T result = array[open];
      array[open] = null; 
 
      return result;
   }
   
   //-----------------------------------------------------------------
   //  Returns true if the array is empty and false otherwise. 
   //-----------------------------------------------------------------
   public boolean isEmpty()
   {
	   
	return (this.count == 0);
   }
 
   //-----------------------------------------------------------------
   //  Returns the number of elements in the array.
   //-----------------------------------------------------------------
   public int size()
   {
	return this.count;
   }

   //-------------------------------------------------
	//  HELPER METHOD - Creates a new array to store the contents of the array with
	//  twice the capacity of the old one.
	//-----------------------------------------------------------------
	private void expandCapacity()
	{
	    T[] larger = (T[])(new Object[array.length*2]);

	      for (int scan=0; scan < array.length; scan++)
	         larger[scan] = array[scan];

	      array = larger;
	   }


   //-----------------------------------------------------------------
   //  Returns a string representation of the entire array. 
   //-----------------------------------------------------------------
   public String toString()
   {
      String result = "";

      for (int scan=0; scan < open; scan++) 
      {
         if (array[scan] != null)
         	result = result + array[scan].toString() + "\n";
      }

      return result;
   }

   public T get(int index)
   {
	   if (index < 0 || index > size())
	   {
		   return null;
	   }
	   else
	   {
		   return array[index];
	   }
   }
   
   public T remove (int index)
   {
	   T result = null;
	   
	   if (index > size() || index < 0)
	   {
		   return null;
	   }
	   
	   if (array[index] == null)
	   {
		   return null;
	   }
	   else
	   {
		   result = array[index];
		   array[index] = null;
	   }
	   return result;
   }
   
   public T remove (T element)
   {
	   T result = null;
	   if(isEmpty())
	   {
		   System.out.println("The list is empty. ");
	   }
	   for(int i=0; i<this.capacity; i++)
	   {
		   if(array[i] != null && array[i].equals(element))
		   {
			   result = array[i];
			   array[i] = null;
			   i--;
		   }
	   }
	   return result;
   }
   
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Application - Book class

package application;

public class Book {
	private String title;
	private String author;
	private int year;
	
	public Book()
	{
		this.title = "";
		this.author = "";
		this.year = 0;
	}
	
	public Book(String title, String author, int year)
	{
		this.title = title;
		this.author = author;
		this.year = year;
	}
	
	public String getTitle()
	{
		return this.title;
	}
	
	public String getAuthor()
	{
		return this.author;
	}
	
	public int getYear()
	{
		return this.year;
	}
	
	public void setTitle(String title)
	{
		this.title = title;
	}
	
	public void setAuthor(String author)
	{
		this.author = author;
	}
	
	public void setYear(int year)
	{
		this.year = year;
	}
	
	public String toString() 
	{
		return "\nTitle: " + this.title + " Author: " + this.author + " Year: " + this.year;
	}
	
	public boolean equals (Object o)
	{
		Book b = (Book) o;
		if (this.title.equals(b.getTitle()) && this.author.equals(b.getAuthor()))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Driver class

package application;
import java.util.Scanner;
import generics.ArrayList;

public class BookShelfArrayList {
	ArrayList<Book>List;
	final int SIZE = 3;
	
	
	public BookShelfArrayList()
	{
		List = new ArrayList<Book>(2);
		
		for (int index = 0; index < SIZE; index++)
		{
			addABook();
		}
		
		System.out.print("");
		System.out.print("The books are: ");
		displayBooks();
		
	removeAnyBook();
	//	System.out.println("After removal, the books are: ");
	//11
	  displayBooks();
	}
	
	public void addABook()
	{
		Scanner scan = new Scanner(System.in);
		Book aBook = null;
		String title, author;
		int year;
		
		System.out.println("Enter the book title: ");
		title = scan.nextLine();
		System.out.println("Enter the author of the book: ");
		author = scan.nextLine();
		System.out.println("Enter the year the book was published in: ");
		year = scan.nextInt();
		scan.nextLine();
		
		aBook = new Book(title, author, year);
		List.add(aBook);
	}
	
	public void displayBooks()
	{
		//System.out.println(List.toString());
		
		//Book b;
		for(int index = 0; index < List.size(); index++)
		{
			if (List.get(index) != null)
			System.out.println(List.get(index));
		}
	}
	
	public void removeBook()
	{
		Book b = null;
		
		b = List.remove();
		System.out.println("The book " + b.getTitle() + " has been removed");
	}
	
	public void removeSpecficBook()
	{
		Book b = null;
		int index;
		Scanner scan = new Scanner(System.in);
		
		System.out.println("What is the index of the element thet you want to delete: ");
		index = scan.nextInt();
		
		b = List.remove(index);
		
		if(b != null)
		{
			System.out.println("The book " + b.getTitle() + " has been removed");
		}
		else
		{
			System.out.println("No boot at that position: ");
		}
	}
	
	public void removeAnyBook()
	{
		Scanner scan = new Scanner(System.in);
		Book aBook;
		Book deletedBook = null;
		String title, author;
		int year;
		boolean found = false;
		
		System.out.println("Please enter the title of the book that you want to delete: ");
		title = scan.nextLine();
		System.out.println("Please enter the author of the book that you want to delete: ");
		author = scan.nextLine();
		System.out.println("Please enetr the year of the book that you want to delete: ");
		year = scan.nextInt();
		scan.nextLine();
		
		aBook = new Book(title, author, year);
		
		deletedBook = List.remove(aBook);
		
		if(deletedBook == null)
		{
			System.out.println("No such book exists. ");
		}
		else
		{
			System.out.println(deletedBook.getTitle() + " was deleted. ");
		}
		
	}
	
	public void findBook()
	{
		Scanner scan = new Scanner(System.in);
		Book aBook;
		String author, title;
		int year;
		boolean found = false;
		
		System.out.println("PLease enter the title of the book: ");
		title = scan.nextLine();
		System.out.println("Please enter the author of the book: ");
		author = scan.nextLine();
		//year = 0;
		
		aBook = new Book(title, author, 0);
		
	
		for(int index = 0; index < List.size(); index++)
		{
			System.out.println(List.get(index));
			
			if (List.get(index).equals(aBook))
			{
				found = true;
			}
		}
		if (found = true)
		{
			System.out.println("The book was found. ");
		}
		else
		{
			System.out.println("The book was not found. ");
			
		}
		
		
	}
	
	public static void main (String [] args)
	{
		new BookShelfArrayList();
	}

}
